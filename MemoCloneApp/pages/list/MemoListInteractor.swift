//
//  MemoListInteractor.swift
//  MemoCloneApp
//
//  Created by MUN JEONG SEO on 2021/02/08.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Firebase
import FirebaseAuth
import FirebaseDatabase

protocol MemoListBusinessLogic {
    func requestMemoList()
    func deleteMemo(key: String?)
    func changeMemoFixStatus(key: String?, isFixed: Bool)
}

protocol MemoListDataStore {
    var uid: String? { get set }
    var memoDataList: [MemoData]? { get set }
}

class MemoListInteractor: MemoListBusinessLogic, MemoListDataStore {
    var presenter: MemoListPresentationLogic?
    var worker = MemoListWorker()
    var uid: String?
    var memoDataList: [MemoData]?
    
    // MARK: Do something
    
    func requestMemoList() {
        worker.requestMemoList(uid: self.uid, completionHandler: {(memoArray, error) in
            if error != nil {
                self.presenter?.presentMemoList(response: .init())
            } else {
                let sortedMemoArray = memoArray?.sorted(by: {
                    $0.updatedDate ?? Date() < $1.updatedDate ?? Date()
                })
                self.memoDataList = sortedMemoArray
                self.presenter?.presentMemoList(response: MemoList.조회.Response(memoArray: sortedMemoArray))
            }
        })
    }
    
    func deleteMemo(key: String?) {
        worker.deleteMemo(uid: self.uid, key: key, completionHandler: { (isDeleted, error) in
            self.presenter?.presentDelete(response: MemoList.삭제.Response(isDeleteSuccess: isDeleted))
        })
    }
    
    func changeMemoFixStatus(key: String?, isFixed: Bool) {
        worker.changeMemoFixStatus(uid: self.uid, key: key, isFixed: isFixed, completionHandler: { (isChanged, error) in
            if isChanged {
                let memoStatus = isFixed ? MemoList.MemoDataStatus.고정: .비고정
                self.presenter?.presentChangeFixStatus(response: MemoList.고정상태_수정.Response(isChangeSuccess: isChanged, toStatus: memoStatus))
            } else {
                let memoStatus = isFixed ? MemoList.MemoDataStatus.비고정: .고정
                self.presenter?.presentChangeFixStatus(response: MemoList.고정상태_수정.Response(isChangeSuccess: isChanged, toStatus: memoStatus))
            }
            
        })
    }
}

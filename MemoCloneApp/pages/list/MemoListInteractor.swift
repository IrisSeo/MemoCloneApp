//
//  MemoListInteractor.swift
//  MemoCloneApp
//
//  Created by MUN JEONG SEO on 2021/02/08.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Firebase

protocol MemoListBusinessLogic {
    func requestMemoList()
    func deleteMemo(key: String?)
    func changeMemoStatus(key: String?, isFixed: Bool)
}

protocol MemoListDataStore {
}

class MemoListInteractor: MemoListBusinessLogic, MemoListDataStore {
    var presenter: MemoListPresentationLogic?
    var worker: MemoListWorker?
    
    // MARK: Do something
    
    func requestMemoList() {
        guard let uid = Auth.auth().currentUser?.uid else {
            return
        }
        
        let ref = Database.database().reference().child("user-memo").child(uid)
        ref.observeSingleEvent(of: .value, with: { (snapshot) in
            
            if let dictionary = snapshot.value as? [String: AnyObject] {
                print("메모 조회 성꽁")

                var memoArray = [MemoData]()
                for data in dictionary {
                    let value = data.value
                    var formedData = MemoData(dictionary: value as! [String : Any])
                    formedData.key = data.key
                    memoArray.append(formedData)
                }
                
                self.presenter?.presentMemoListSuccess(response: memoArray)
                
            } else {
                print("메모 조회 실패: 저장된 메모 리스트 없음")
            }
                        
        }, withCancel: nil)
    }
    
    func deleteMemo(key: String?) {
        guard let uid = Auth.auth().currentUser?.uid,
              let key = key else {
            print("uid OR key 없음")
            return
        }
        
        let ref = Database.database().reference().child("user-memo").child(uid).child(key)
        ref.removeValue()
        
        self.presenter?.presentDeleteSuccess()
        
        //MARK: 참고(파이어베이스 - 특정 데이터값 삭제)
    }
    
    func changeMemoStatus(key: String?, isFixed: Bool) {
        guard let uid = Auth.auth().currentUser?.uid,
              let key = key else {
            print("uid OR key 없음")
            return
        }
        
        let ref  = Database.database().reference().child("user-memo").child(uid).child(key)
        ref.updateChildValues(["isFixed": isFixed])
        self.presenter?.presentChangeIsFixedSuccess()
        
        //MARK: 참고(파이어베이스 - 특정 데이터만 수정하기) https://pythonq.com/so/ios/1966026
    }
}

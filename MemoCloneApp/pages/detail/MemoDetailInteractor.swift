//
//  MemoDetailInteractor.swift
//  MemoCloneApp
//
//  Created by MUN JEONG SEO on 2021/02/08.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Firebase

protocol MemoDetailBusinessLogic {
    func requestSaveMemoData(request: MemoDetail.저장.Request, key: String?)
}

extension MemoDetailBusinessLogic {
    func requestSaveMemoData(request: MemoDetail.저장.Request, key: String? = nil) {
        requestSaveMemoData(request: request, key: key)
    }
}

protocol MemoDetailDataStore {
}

class MemoDetailInteractor: MemoDetailBusinessLogic, MemoDetailDataStore {
    var presenter: MemoDetailPresentationLogic?
    var worker: MemoDetailWorker?
        
    // MARK: Do something
    
    func requestSaveMemoData(request: MemoDetail.저장.Request, key: String? = nil) {
        guard let memoData = request.memoData else {
            return
        }
        
        guard let uid = Auth.auth().currentUser?.uid else {
            return
        }
        
        let ref = Database.database().reference().child("user-memo")
        var childRef = DatabaseReference()
        if let key = key {
            childRef = ref.child(uid).child(key)
        } else {
            childRef = ref.child(uid).childByAutoId()
        }
        
        // child properties
        let title = memoData.title ?? ""
        let content = memoData.content ?? ""
        let isFixed = memoData.isFixed
        let updatedDate = Int(Date().timeIntervalSince1970)
        let values: [String: Any] = ["uid": uid, "title": title, "content": content, "updatedDate": updatedDate, "isFixed": isFixed]
        
        childRef.updateChildValues(values) {(error, ref) in
            if error != nil {
                print("메모저장 실패:", error!)
                self.presenter?.presentSaveFail()
                return
            }
            
            guard let key = childRef.key else { return }
            print("메모저장 성공: \(key)")
            self.presenter?.presentSaveSuccess()
            
        }
    }
    
//    func doSomething(request: MemoDetail.저장.Request) {
//        worker = MemoDetailWorker()
//        worker?.doSomeWork()
//
//        let response = MemoDetail.Something.Response()
//        presenter?.presentSomething(response: response)
//    }
}
